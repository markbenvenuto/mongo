# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/idl/idl_test_types.h"
        - "mongo/db/matcher/schema/encrypt_types.h"

imports:
    - "mongo/idl/basic_types.idl"

# TODO - stop using the test type
types:
    any_basic_type:
        bson_serialization_type: any
        description: "An Any Type"
        cpp_type: "mongo::AnyBasicType"
        serializer: mongo::AnyBasicType::serializeToBSON
        deserializer: mongo::AnyBasicType::parseFromBSON

    keyid:
        bson_serialization_type: any
        description: "An Any Type"
        cpp_type: "mongo::KeyId"
        serializer: mongo::KeyId::serializeToBSON
        deserializer: mongo::KeyId::parseFromBSON

    normalizedKeyId:
        bson_serialization_type: any
        description: "An Any Type"
        cpp_type: "mongo::NormalizedKeyId"
        serializer: mongo::NormalizedKeyId::serializeToBSON
        deserializer: mongo::NormalizedKeyId::parseFromBSON


enums:
    FLEAlgorithm:
        description: "Metrics Encoding Methods"
        type: string
        values:
            deterministic: "TBD_Deterministic"
            random: "TBD_Snappy"

structs:
    # Everything is optional
    # maps to "encrypt" in JSON Schema
    EncryptionInfo:
        description: "Encrypt Schema information"
        strict: true
        fields:
          type:
            description: "foo"
            type: string
            optional: true
          algorithm:
            description: "foo"
            type: FLEAlgorithm
            optional: true
          initializationVector:
            description: "foo"
            type: bindata_generic
            optional: true
          keyId:
            description: "foo"
            type: keyid
            optional: true
          keyVaultURI:
            description: "foo"
            type: string
            optional: true

    # Everything is optional
    # maps to "encryptMetadata" in JSON Schema
    EncryptionMetadata:
        description: "Encrypt Schema metadata information"
        strict: true
        fields:
          algorithm:
            description: "foo"
            type: FLEAlgorithm
            optional: true
          initializationVector:
            description: "foo"
            type: bindata_generic
            optional: true
          keyId:
            description: "foo"
            type: keyid
            optional: true
          keyVaultURI:
            description: "foo"
            type: string
            optional: true

    # Nothing is optional
    # Normalized JSON schema - merges encrypt and encryptMetadata
    EncryptionInfoNormalized:
        description: "Encrypt Schema metadata information"
        strict: true
        fields:
          algorithm:
            description: "foo"
            type: FLEAlgorithm
          initializationVector:
            description: "foo"
            type: bindata_generic
          keyId:
            description: "foo"
            type: keyid
          keyVaultURI:
            description: "foo"
            type: string

    # Nothing is optional as we want to be explicit to drivers
    EncryptionPlaceholder:
        description: "Encrypt Schema placeholder"
        strict: true
        fields:
          type:
            description: "foo"
            type: string
          algorithm:
            description: "foo"
            type: FLEAlgorithm
          initializationVector:
            description: "foo"
            type: bindata_generic
          keyId:
            description: "foo"
            type: normalizedKeyId
          keyVaultURI:
            description: "foo"
            type: string
          value:
            description: "value to encrypt"
            type: any_basic_type
