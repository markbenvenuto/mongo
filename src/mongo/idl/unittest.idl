# Copyright (C) 2017 MongoDB Inc.
#
# This program is free software: you can redistribute it and/or  modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# IDL Unit Tests IDL file
global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/namespace_string.h"
        - "mongo/idl/idl_test_types.h"

type:
    name: string
    bson_serialization_type: string
    description: "A BSON UTF-8 string"
    cpp_type: "std::string"
    deserializer: "mongo::BSONElement::str"

type:
    name: int
    bson_serialization_type: int
    description: "A BSON 32-bit integer"
    cpp_type: "std::int32_t"
    deserializer: "mongo::BSONElement::_numberInt"

type:
    name: long
    bson_serialization_type: long
    description: "A BSON 64-bit integer"
    cpp_type: "std::int64_t"
    deserializer: "mongo::BSONElement::_numberLong"

type:
    name: double
    bson_serialization_type: double
    description: "A BSON 64-bit floating point number"
    cpp_type: "double"
    deserializer: "mongo::BSONElement::_numberDouble"

type:
    name: decimal
    bson_serialization_type: double
    description: "A BSON 128-bit floating point decimal number"
    cpp_type: "mongo::Decimal128"
    deserializer: "mongo::BSONElement::_numberDecimal"

type:
    name: bool
    bson_serialization_type: bool
    description: "A BSON bool"
    cpp_type: "bool"
    deserializer: "mongo::BSONElement::boolean"

# TODO: support bindata
# type:
#     name: bindata
#     bson_serialization_type: bindata
#     cpp_type: "std:"
#     deserializer: "mongo::BSONElement::str"

type:
    name: objectid
    bson_serialization_type: objectid
    description: "A BSON ObjectID"
    cpp_type: "mongo::OID"
    deserializer: "mongo::BSONElement::OID"

type:
    name: date
    bson_serialization_type: date
    description: "A BSON UTC DateTime"
    cpp_type: "mongo::Date_t"
    deserializer: "mongo::BSONElement::date"

type:
    name: timestamp
    bson_serialization_type: timestamp
    description: "A BSON TimeStamp"
    cpp_type: "mongo::Timestamp"
    deserializer: "mongo::BSONElement::timestamp"

##################################################################################################
#
# Unit test structs for a single value to ensure type validation works correctly
#
##################################################################################################

struct:
    name: one_string
    description: UnitTest for a single string
    fields:
        value: string

struct:
    name: one_int
    description: UnitTest for a single int
    fields:
        value: int

struct:
    name: one_long
    description: UnitTest for a single long
    fields:
        value: long

struct:
    name: one_double
    description: UnitTest for a single double
    fields:
        value: double

struct:
    name: one_decimal
    description: UnitTest for a single decimal
    fields:
        value: decimal

struct:
    name: one_bool
    description: UnitTest for a single bool
    fields:
        value: bool

struct:
    name: one_objectid
    description: UnitTest for a single objectid
    fields:
        value: objectid

struct:
    name: one_date
    description: UnitTest for a single date
    fields:
        value: date

struct:
    name: one_timestamp
    description: UnitTest for a single timestamp
    fields:
        value: timestamp

##################################################################################################
#
# Structs to test various options for structs/fields
#
##################################################################################################
struct:
    name: RequiredStrictField3
    description: UnitTest for a strict struct with 3 required fields
    fields:
        field1: int
        field2: int
        field3: int

struct:
    name: RequiredNonStrictField3
    description: UnitTest for a non-strict struct with 3 required fields
    strict: false
    fields:
        field1: int
        field2: int
        field3: int

##################################################################################################
#
# Structs to test various options for fields
#
##################################################################################################
struct:
    name: ignoredField
    description: UnitTest for a struct with an ignored_field
    fields:
        required_field: int
        ignored_field:
            type: int
            ignore: true


##################################################################################################
#
# Test a custom non-BSONElement deserialization and serialization methods for a string type
#
##################################################################################################

type:
    name: namespacestring
    bson_serialization_type: string
    description: "A MongoDB NamespaceString"
    cpp_type: "mongo::NamespaceString"
    serializer: mongo::NamespaceString::toString
    deserializer: mongo::NamespaceString

struct:
    name: one_namespacestring
    description: UnitTest for a single namespacestring
    fields:
        value: namespacestring

##################################################################################################
#
# Test a custom non-BSONElement deserialization and serialization methods for an any type
#
##################################################################################################

type:
    name: any_basic_type
    bson_serialization_type: any
    description: "An Any Type"
    cpp_type: "mongo::AnyBasicType"
    serializer: mongo::AnyBasicType::serialize
    deserializer: mongo::AnyBasicType::parse

struct:
    name: one_any_basic_type
    description: UnitTest for a single any type
    fields:
        value: any_basic_type


##################################################################################################
#
# Test a custom non-BSONElement deserialization and serialization methods for an object type
#
##################################################################################################

type:
    name: object_basic_type
    bson_serialization_type: object
    description: "An object Type"
    cpp_type: "mongo::ObjectBasicType"
    serializer: mongo::ObjectBasicType::serialize
    deserializer: mongo::ObjectBasicType::parse

struct:
    name: one_object_basic_type
    description: UnitTest for a single object type
    fields:
        value: object_basic_type


##################################################################################################
#
# Test types that accept multiple serialization types
#
##################################################################################################


type:
    name: safeInt32
    description: Accepts any numerical type within int32 range
    cpp_type: std::int64_t
    bson_serialization_type: 
                            - long
                            - int
                            - decimal
                            - double
    deserializer: "mongo::BSONElement::numberInt"

struct:
    name: one_safeint32
    description: UnitTest for a single safeInt32
    fields:
        value: safeInt32

##################################################################################################
#
# Test fields with default values
#
##################################################################################################

struct:
    name: default_values
    description: UnitTest for a single safeInt32
    fields:
        V_string:
            type: string
            default: '"a default"'
        V_int:
            type: int
            default: 42
        V_long:
            type: long
            default: 423
        V_double:
            type: double
            default: 3.14159
        V_bool:
            type: bool
            default: true

##################################################################################################
#
# Test fields with optional values
#
##################################################################################################

struct:
    name: optional_field
    description: UnitTest for a optional field
    fields:
        field1:
            type: string
            optional: true
        field2:
            type: int
            optional: true
